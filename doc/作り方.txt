●JSP


<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%> pageディレクティブ
<%@ page import="ex.Employee" %>
<%@ page import="model.Game" %>
<%
	Game game = (Game) session.getAttribute("game");//gameがなかったらnullが入ってる　元の形にキャスト
	Fruit fruit = (Fruit) request.getAttribute("fruit");
%>

javaを記述
<% Employee emp = new Employee("001", "湊　雄輔") %>

<!DOCTYPE html>
<link rel="stylesheet" href="<%= request.getContextPath() %>/css/style.css">

<html>
<body>
<% for(int i = 0; i < 10; i++){ %>
<% if(i % 3 == 0){%>
<p class="red">
<% } else {%>
<p> 
<% }%>
IDは<%= emp.getID() %>名前は<%= emp.getName() %></p>
<% }%>

</body>
</html>


jspファイルのURLの形式　：http://<サーバー名>/<アプリケーション（プロジェクト名）/〇〇.jsp>
WebContentはプロジェクトのTOPという意味
/------------------------------------------------------------------------------------------------

●フォーム
リクエストすると同時にデータを送信

<form action="/example/FormSampleServlet" method="get">　→　サーブレットクラス
<form action="/example/formSample.jsp" method="get">　→　JSPファイル

フォーム部分
example/WebContent/formSample.jsp


送信先のServlet内容
example/src/servlet/FormSampleServlet.java

パラメータを取得
String name = request.getParameter("name");　　　　
String gender = request.getParameter("gender");


package servlet;

import java.io.IOException;

@WebServlet("/FormSampleServlet")　→　action部分と合わせる


/------------------------固定t-------------------------------------------------/

public class FormSampleServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;


/------------------------doGet-------------------------------------------------/
	protected void doGet(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException {


	}


/------------------------doPost-------------------------------------------------/
	protected void doPost(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException {

	}

/------------------------　doPost doGetの中の処理　-------------------------------------------------/

request.setCharacterEncoding("UTF-8");　　URLエンコードによって変換されたリクエストパラメータを戻す処理


String name = request.getParameter("name");　　　　パラメータを取得
String gender = request.getParameter("gender");


＜パラメータチェック＞

＜表示するメッセージ設定＞



＜HTML出力＞
response.setContentType("text/html; charset=UTF-8");
PrintWriter out = response.getWriter();


out.println("<!DOCTYPE html>");

/------------------------　doPost doGetの中の処理　-------------------------------------------------/


}


●フォワード【処理がはやい】基本的に内部
　ＵＲＬはリクエスト時そのまま

/------------------------　doGetの中に書く　-------------------------------------------------/

import javax.servlet.RequestDispatcher;



※＜フォワードの構文(フォワードを行うサーブレットクラスに書く)＞
RequestDispatcher dispatcher =
request.getRequestDispatcher("フォワード先");　例）/WEB-INF/jsp/forwardSample.jsp
dispatcher.forward(request, response);

/------------------------　変数にいれたバージョン
String url = "/play.jsp";
RequestDispatcher dispatcher =//dispatcherの移動先を設定
	request.getRequestDispatcher(url);//RequestDispatcherというクラス
dispatcher.forward(request, response);//ここで遷移
/------------------------


フォワードのリンクはプロジェクト名いらない


●リダイレクト　【転送元と転送先のアプリケーションが別】基本的に外部
　ＵＲＬはリダイレクト先　表示ページとＵＲＬを同じにしたい時はリダイレクト

ブラウザのリクエスト先を変更して処理の転送
servletはただリダイレクトのみ行う


/------------------------　doGetの中に書く　-------------------------------------------------/
※＜リダイレクトの構文＞
response.sendRedirect("リダイレクト先のＵＲＬ");　　


<リダイレクト先が同じサーバである例（サーブレットクラス）>
response.sendRedirect("/example（プロジェクト名）/SampleServlet");　
c 2021 GitHub, Inc.
Terms
Privacy
Security
Status
Docs


●リクエストスコープ

＜サーブレットクラス＞

　　上部に記入　import model.Game;

　 1.フォワードする

　 2.フォーム内容をうけとる

　 3.javabeansにセットする

		Game game = new Game(user, com, Msg);//インスタンスを作る
		request.setAttribute("game", game);//("属性名",インスタンス名)

　 4.フォワードする

＜jsp＞

<%@ page import="model.Game" %>
<%
	Game game = (Game) request.getAttribute("game");//gameがなかったらnullが入ってる　元の形にキャスト
%>
　　　　取得するインスタンスの型　変数名　＝　（取得するインスタンスの型）request.getAttribute("属性名");


	<% if (game != null){ %>
		<h2>結果</h2>
		<p>user:<%= game.getUser() %></p>
		<p>com:<%= game.getCom() %></p>
		<p><%= game.getMsg() %></p>
	<% } %>






<Servlet>
/------------------------　Servlet　--------------------------------------------/
@weServlet("/MinatoIndex")
/------------------------固定t-------------------------------------------------/

public class FormSampleServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;


/------------------------doGet-------------------------------------------------/
	protected void doGet(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException {

request.setCharacterEncoding("UTF-8");
	}
	
	
	
<javabeans>
/------------------------　javabeans　------implements Serializable--------------------------------------/
package model;

import java.io.Serializable;

public class Game implements Serializable {
	
 private int user;
 private int com;
 private String Msg;
 
 public Game() {}
 public Game(int user, int com, String Msg) { //Gameのuserにセットしている
	 this.user = user;
	 this.com = com;
	 this.Msg = Msg;
 }
 
public int getUser() {
	return user;
}
public void setUser(int user) {
	this.user = user;
}
public int getCom() {
	return com;
}
public void setCom(int com) {
	this.com = com;
}
public String getMsg() {
	return Msg;
}
public void setMsg(String msg) {
	Msg = msg;
}
 
	
}

/---------------------------------------------------------------------------------/





●セッションスコープ

＜jsp＞

<%@ page import="model.Game" %>
<%
	Game game = (Game) session.getAttribute("game");//gameがなかったらnullが入ってる　元の形にキャスト
	Fruit fruit = (Fruit) request.getAttribute("fruit");
%>



<a href="/example/RegisterUser?action=done"></a>


＜サーブレットクラス＞
	protected void doPost(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException {
		String forwardPath = null;

                String action = request.getParameter("action");

                if(action == null){
		forwardPath ="";
		}

		else if(action.equals("done")){

		HttpSession session = request.getSession();//インスタンスの取得
		User registerUser = (User) session.getAttrobute("registerUser");//セッションスコープからインスタンスの取得

		//登録処理の呼び出し
		RegisterUsetLogic logic = new RegisterUserLogic();
		logic.excute(registerUser);

		//不要となったセッションスコープ内のインスタンスを削除
		session.removeAttribute("registerUser");

		//登録後のフォワード先を設定
		forwardPath = "";
	}


	//設定されたフォワード先にフォワード
	RequestDispatcher dispatcher =
		request.getRequestDispatcher(forwardPath);
	dispatcher.forward(request, response);
}


	protected void doPost(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException {


	//登録するユーザー情報を設定
	User registerUser = new User(id, name, pass);


	//セッションスコープに登録ユーザーを保存
		HttpSession session = request.getSession();//インスタンスの取得	
		session.setAttribute("registerUser", registerUser);セッションスコープにインスタンスを保存


	RequestDispatcher dispatcher =
		request.getRequestDispatcher("");
	dispatcher.forward(request, response);

	}



		}













/---------------------------------------------------------------------------------/

セッションスコープ


//HttpSessionインスタンスの取得
HttpSession session = request.getSession();

//セッションスコープにインスタンスを保存
session.setAttribute("human", human);

//セッションスコープからインスタンスを取得
Human h = (Human) session.getAttribute("human");

//セッションスコープからインスタンスを削除
session.removeAttribute("human");


●jsp
<%
Human h = (Human) session.getAttribute("human");
%>
/---------------------------------------------------------------------------------/

●アプリケーションスコープ


//ServletContextインスタンスの取得
ServletContext application = this.getServletContext();

//アプリケーションスコープにインスタンスを保存
application.stAttribute("human", human);

//アプリケーションスコープからインスタンスを取得
Human h = (Human) application.getAttribute("human");

//アプリケーションスコープからインスタンスを削除
application.removeAttribute("human");

/------------------　まとめ　---------------------------------------------------/

    //HttpSesionインスタンスの取得
     HttpSesion session = request.getSession();

    //ServletContextインスタンスの取得
     ServletContext application = this.getServletContext();


    //各スコープにインスタンスを保存
     request.setAttribute("fruit", f);
     session.setAttribute("fruit", f);
     application.setAttribute("fruit", f);

    //各スコープからインスタンスの取得
    Human h = (Human) request.getAttribute("human");
    Human h = (Human) session.getAttribute("human");
    Human h = (Human) application.getAttribute("human");

    //各スコープからインスタンスの削除
    session.removeAttribute("human");
    application.removeAttribute("human");

/---------------------------------------------------------------------------------/


●jsp
<%
Human h = (Human) application.getAttribute("human");
%>






/---------------------------------------------------------------------------------/
●URL
<a href="<%= request.getContextPath() %>">トップへ</a>
プロジェクトのTOPへのリンク







/---------------------------------------------------------------------------------/
●EL式



【変数の値の出力】
<c:out value="${human.name}" />

【分岐文】


●JSTL
使うページの上に以下を挿入
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

カスタムタグダウンロード
java maven jstl-api
java maven jstl-impl

WEB-INF libに２ファイルいれる
右クリック　ビルドパス追加

/---------------------------------------------------------------------------------/
●データベース
Connection
PreparedStatement



/-----------------------------GetEmployeeListLogic--------------------------------------------/

package model;

import java.util.List;

import dao.EmployeeDAO;

public class GetEmployeeListLogic {
	public List<Employee> execute() {
		EmployeeDAO dao = new EmployeeDAO();　//daoを呼び出す
		List<Employee> empList = dao.findAll();　//DBから取得してくる　findAll()に取得してくるメソッドが書かれている
	return empList;
	}
}


/-----------------------------リクエストスコープに保存--------------------------------------------/

		GetEmployeeListLogic getEmployeeListLogic = new GetEmployeeListLogic();    //GetEmployeeListLogic を呼び出す
		 List<Employee> empList = getEmployeeListLogic.execute();　 // daoにはデータベースに接続してリストを取得する関数が書いてある
		 request.setAttribute("empList", empList);　 //リクエストスコープにリスト保存する
